project.group = "com.github.metridoc"
project.version = new File(project.projectDir, "VERSION").text

archivesBaseName = "metridoc-job-core"

apply plugin: 'groovy'
apply plugin: 'metridoc'

sourceCompatibility = "1.7"
targetCompatibility = "1.7"


buildscript {
    repositories {
        mavenLocal()
        maven {
            url = "http://dl.bintray.com/upennlib/metridoc"
        }
        maven {
            url = "http://jcenter.bintray.com/"
        }
    }

    dependencies {
        classpath "com.github.metridoc:metridoc-gradle-plugin:0.2.19"
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://jcenter.bintray.com/"
    }
}

dependencies {
    def camelVersion = "2.11.0"
    def slf4jVersion = "1.7.5"
    compile("commons-dbcp:commons-dbcp:1.4")
    compile("com.github.camel-glite:camel-glite:0.4") {
        exclude module: 'slf4j-api'
    }
    compile('com.google.guava:guava:13.0.1')
    compile('org.codehaus.groovy:groovy-all:2.0.8')
    compile('org.apache.ivy:ivy:2.2.0')
    compile("mysql:mysql-connector-java:5.1.20")
    runtime('dom4j:dom4j:1.6.1') {
        exclude module: "xml-apis"
    }
    compile("org.apache.camel:camel-stream:$camelVersion") {
        exclude module: 'camel-core'
    }
    compile("org.apache.camel:camel-ftp:$camelVersion") {
        exclude module: 'camel-core'
    }
    compile('org.hibernate:hibernate-core:3.6.10.Final') {
        exclude module: 'slf4j-api'
        exclude module: 'dom4j'
        exclude module: 'antlr'
    }
    compile("org.apache.camel:camel-groovy:$camelVersion") {
        exclude module: 'camel-core'
        exclude module: 'groovy-all'
    }
    compile("commons-codec:commons-codec:1.5")
    compile("org.apache.poi:poi:3.8-beta3")
    compile("org.apache.poi:poi-ooxml:3.8-beta3") {
        exclude module: 'poi'
        exclude module: 'dom4j'
    }
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    testCompile 'com.github.stefanbirkner:system-rules:1.3.1'
    testCompile("org.slf4j:slf4j-simple:$slf4jVersion")
    compile("org.slf4j:slf4j-api:$slf4jVersion")
    compile("org.slf4j:jcl-over-slf4j:$slf4jVersion") {
        exclude module: 'slf4j-api'
    }
    compile("commons-io:commons-io:2.1")
    compile("commons-lang:commons-lang:2.4")
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile("org.apache.camel:camel-test:$camelVersion") {
        exclude module: "commons-logging"
        exclude module: "camel-core"
        exclude module: "spring-context"
        exclude module: "spring-aop"
        exclude module: "spring-tx"
        exclude module: "junit"
    }
    testCompile("com.h2database:h2:1.3.170")
    testCompile("org.springframework:spring-jdbc:3.1.2.RELEASE") {
        exclude module: "commons-logging"
    }
    runtime 'org.javassist:javassist:3.16.1-GA'
    runtime 'antlr:antlr:2.7.7'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile('com.bloidonia:groovy-stream:0.6') {
        exclude module: "groovy-all"
    }
}

enableMaven { pom ->
    pom.whenConfigured { pomToConfigure ->
        pomToConfigure.dependencies.find { dep -> dep.artifactId == 'poi' }.optional = true
        pomToConfigure.dependencies.find { dep -> dep.artifactId == 'poi-ooxml' }.optional = true
        pomToConfigure.dependencies.find { dep -> dep.artifactId == 'groovy-all' }.scope = 'provided'
        def installerDelegate = delegate
        def classLoader = installerDelegate.getClass().classLoader
        def Exclusion = classLoader.loadClass("org.apache.maven.model.Exclusion")
        def slf4jExclusion = Exclusion.newInstance(
                artifactId: "slf4j-api",
                groupId: "org.slf4j"
        )

        def dom4JExclusion = Exclusion.newInstance(
                artifactId: "dom4j",
                groupId: "dom4j"
        )

        def xmlApisExclusion = Exclusion.newInstance(
                artifactId: "xml-apis",
                groupId: "xml-apis"
        )

        def groovyAllExclusion = Exclusion.newInstance(
                artifactId: "groovy-all",
                groupId: "org.codehaus.groovy"
        )

        pomToConfigure.dependencies.each { dep ->
            dep.exclusions.add(xmlApisExclusion)
            def artifactId = dep.artifactId
            def camelCore = artifactId == 'camel-core'
            def notCoreCamelDependency = !camelCore && dep.groupId == 'org.apache.camel'
            if (notCoreCamelDependency) {
                def exclusions = dep.exclusions
                def camelCoreExclusion = Exclusion.newInstance(
                        artifactId: "camel-core",
                        groupId: "org.apache.camel"
                )

                exclusions.add(camelCoreExclusion)
            }

            if (camelCore) {
                dep.exclusions.add(slf4jExclusion)
            }

            if (artifactId == "hibernate-core" || artifactId == "hibernate-validator") {
                dep.exclusions.add(slf4jExclusion)
            }

            if (artifactId == "hibernate-core") {
                dep.exclusions.add(dom4JExclusion)
                dep.exclusions.add(Exclusion.newInstance(
                        artifactId: "antlr",
                        groupId: "antlr"
                ))
            }

            if (artifactId == "camel-groovy") {
                dep.exclusions.add(Exclusion.newInstance(
                        artifactId: "groovy-all",
                        groupId: "org.codehaus.groovy"
                ))
            }

            if (artifactId == "groovy-stream") {
                dep.addExclusion(groovyAllExclusion)
            }

            if (artifactId == "poi-ooxml") {
                dep.exclusions.add(Exclusion.newInstance(
                        artifactId: "poi",
                        groupId: "org.apache.poi"
                ))
                dep.exclusions.add(dom4JExclusion)
            }

            if (dep.groupId == "org.slf4j" && artifactId != "slf4j-api") {
                dep.exclusions.add(slf4jExclusion)
            }
        }
    }

    pom.project {
        name = project.description
        description = project.description
        url = 'https://github.com/metridoc'
        organization {
            name = 'Upenn Libraries'
            url = 'https://github.com/metridoc'
        }
        licenses {
            license {
                name 'Educational Community License'
                //noinspection GroovyAssignabilityCheck
                url 'http://opensource.org/licenses/ECL-2.0'
                distribution 'repo'
            }
        }
        scm {
            url = 'https://github.com/metridoc/metridoc-job-core'
            connection = 'https://github.com/metridoc/metridoc-job-core'
            developerConnection = 'https://github.com/metridoc/metridoc-job-core'
        }
        developers {
            developer {
                id = 'tbarker'
                name = 'Thomas Barker'
                email = 'tbarker@pobox.upenn.edu'
            }
        }
    }
}